<h1>MemeStock Simulation</h1>

<div>
  <h2>Current Price: <span id="current-price">$<%= number_with_precision(@current_price, precision: 2) %></span></h2>
</div>

<div id="bad-network">
  Disconnected from server. Attempting to reconnect...
</div>

<div id="historical-prices">
  <h3>Last 60 Seconds</h3>
  <canvas id="price-chart"></canvas>
</div>

<form>
  <div class="trading-actions grid">
    <span tabindex="0" onclick="buyStock()" role="button">Buy</span>
    <span tabindex="0" onclick="sellStock()" role="button">Sell</span>
    <span tabindex="0" onclick="praiseTheSun()" role="button" class="secondary">ðŸŒž Praise the sun</span>
  </div>
  <label id="owned">Stocks Owned: <input type="text" readonly value="0" style="display:inline" /></label>
  <label id="balance">
    Balance: <input type="text" readonly value="0" style="display:inline" />
  </label>
</form>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Initialize state
  const price_data = <%= raw @historical_prices.to_json %>.reverse();
  const ctx = document.getElementById('price-chart').getContext('2d');
  let chart = null;
  let balance = parseDecimal(localStorage.getItem('rails.balance')) || 10;
  let owned = parseDecimal(localStorage.getItem('rails.owned')) || 0;

  // Updates the chart inplace with new data
  function updateChart(newData) {
    if(typeof newData !== 'undefined') {
      price_data.push(newData);
      price_data.shift();
      document.getElementById('current-price').textContent = `$${newData[0]}`;
    }
    if(chart) {
      chart.data.labels = price_data.map(d => new Date(d[1]).toLocaleTimeString());
      chart.data.datasets[0].data = price_data.map(d => d[0]);
      chart.update();
    } else {
      initChart();
    }
  }

  // Initialize the chart
  function initChart() {
    if(chart) {
      return;
    }
    chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: price_data.map(d => new Date(d[1]).toLocaleTimeString()),
        datasets: [{
          label: 'ValveCoin Price',
          data: price_data.map(d => d[0]),
          borderColor: 'rgb(75, 192, 192)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        animation: false,
        scales: {
          y: {
            beginAtZero: false
          }
        }
      }
    });
    updateBalance(x => x);
    updateOwned(x => x);
  }

  // Updates balance/owned using a functor
  function updateBalance(updateFun) {
    balance = parseDecimal(updateFun(balance));
    localStorage.setItem('rails.balance', balance);
    document.getElementById('balance').querySelector('input').value = moneyFormat.format(balance);
  }
  function updateOwned(updateFun) {
    owned = parseDecimal(updateFun(owned));
    localStorage.setItem('rails.owned', owned);
    document.getElementById('owned').querySelector('input').value = owned;
  }

  // buy and sell functions
  function buyStock() {
    const price = parseDecimal(price_data[0][0]);
    if(balance < price) {
      alert('Not enough funds');
      return;
    }
    updateBalance(x => x -= price);
    updateOwned(x => x+1);
  }
  function sellStock() {
    if(owned < 1) {
      alert('Not enough stocks');
      return;
    }
    updateBalance(x => x += parseDecimal(price_data[0][0]));
    updateOwned(x => x-1);
  }
  function praiseTheSun() {
    updateBalance(x => x + 1 * (owned * 0.1));
  }

  // Utility
  function parseDecimal(value) {
    return parseFloat(parseFloat(value).toFixed(2));
  }

  const moneyFormat = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  });
  
  // Bindings
  document.addEventListener('DOMContentLoaded', initChart);
  document.addEventListener('turbo:load', initChart);
  document.addEventListener('keyup', event => event.code === 'Space' && praiseTheSun())
</script>
